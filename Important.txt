
################################

// Hello Check this out it works absolutely fine
let request = new XMLHttpRequest();
request.open("GET", "https://restcountries.com/v3.1/all")
request.send();
request.onload = () => {
    let data = JSON.parse(request.response)
     /* console.log(data) */
    let answer = data.filter((dummy) => (dummy.currencies !== undefined))
    console.log(answer.length)
    let realanswer = answer.filter((data) =>  {
    for (let key in data.currencies) {
        if(data.currencies[key].name === "United States dollar"){
      return data
      }
    }
    })
    console.log(realanswer.length, realanswer[0].currencies)
}


#######################
// get user input
const age = prompt("What is your age?");

// check condition
const message = (age >= 18) ? "You are an adult" : "You are not an adult yet";

console.log(message); 


##########################
// get user input
const age = prompt("What is your age?");

// check condition
const message = (age >= 18) ? (age == 18 ? "You are exactly 18" : "You are over 18") : "You are under 18";

console.log(message); 
########################


for-in loop sample
==================
for (var i in obj1) {
    // Prints all the keys in
    // obj1 on the console
    console.log(i+" => "+obj1[i]);
}

Objects Sample
==============
let person = {
    gender: "male"
}

let person1 = Object.create(person);
person1.name = "Adam";
person1.age = 45;
person1.nationality = "Australian";

for (let key in person1) {
    // Output : name, age, nationality 
    // and gender
    console.log(key+" => "+ person1[key]);
}


git init	Initialize a local Git repository
git commit -m "[commit message]"	Commit changes
git remote add origin ssh://git@github.com/[username]/[repository-name].git	Add a remote repository
git remote set-url origin ssh://git@github.com/[username]/[repository-name].git	Set a repository's origin branch to SSH


git clone repo_url	Clone public repository
git clone ssh://git@github.com/[username]/[repository-name].git	Clone private repository
git status	Check status
git add [file-name]	Add a file to the staging area
git add -A	Add all new and changed files to the staging area
git rm -r [file-name.txt]	Remove a file (or folder)
git branch	List of branches (the asterisk denotes the current branch)
git branch -a	List all branches (local and remote)
git branch [branch name]	Create a new branch
git branch -d [branch name]	Delete a branch
git branch -D [branch name]	Delete a branch forcefully
git push origin --delete [branch name]	Delete a remote branch
git checkout -b [branch name]	Create a new branch and switch to it
git checkout -b [branch name] origin/[branch name]	Clone a remote branch and switch to it
git branch -m [old branch name] [new branch name]	Rename a local branch
git checkout [branch name]	Switch to a branch
git checkout -	Switch to the branch last checked out
git checkout -- [file-name.txt]	Discard changes to a file
git merge [branch name]	Merge a branch into the active branch
git merge [source branch] [target branch]	Merge a branch into a target branch
git stash	Stash changes in a dirty working directory
git stash clear	Remove all stashed entries
git push origin [branch name]	Push a branch to your remote repository
git push -u origin [branch name]	Push changes to remote repository (and remember the branch)
git push	Push changes to remote repository (remembered branch)
git push origin --delete [branch name]	Delete a remote branch
git pull	Update local repository to the newest commit
git pull origin [branch name]	Pull changes from remote repository
git log	View changes
git log --summary	View changes (detailed)
git log --oneline	View changes (briefly)
git diff [source branch] [target branch]	Preview changes before merging
git revert commitid	Revert commit changes
git config --global user.name "your_username"	Set globally Username
git config --global user.email "your_email_address@example.com"	Set globally Email id
git config --global --list	Get global config